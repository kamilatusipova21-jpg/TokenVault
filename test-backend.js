#!/usr/bin/env node

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±—ç–∫–µ–Ω–¥–∞
const { Connection, PublicKey, clusterApiUrl } = require('@solana/web3.js');

const PROGRAM_ID = 'ALuf64RcUJFPdsXdxi2p4rYoQBe13UX9RW27sfDWnDaa';
const WALLET_ADDRESS = 'AKeydQ2qxGQVAYuGD7nzYYxSdzRM8yVDWtgYWWwxANgQ';

async function testBackend() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Sol-Canvas Backend');
    console.log('=====================================');
    
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana Devnet
        console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana Devnet...');
        const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:');
        console.log(`Program ID: ${PROGRAM_ID}`);
        
        const programInfo = await connection.getAccountInfo(new PublicKey(PROGRAM_ID));
        if (programInfo) {
            console.log('‚úÖ –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω');
            console.log(`   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${programInfo.data.length} –±–∞–π—Ç`);
            console.log(`   –í–ª–∞–¥–µ–ª–µ—Ü: ${programInfo.owner.toString()}`);
            console.log(`   –ë–∞–ª–∞–Ω—Å: ${programInfo.lamports / 1e9} SOL`);
        } else {
            console.log('‚ùå –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        console.log('\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞:');
        console.log(`–ê–¥—Ä–µ—Å: ${WALLET_ADDRESS}`);
        
        const balance = await connection.getBalance(new PublicKey(WALLET_ADDRESS));
        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å: ${balance / 1e9} SOL`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:');
        const signatures = await connection.getSignaturesForAddress(
            new PublicKey(WALLET_ADDRESS),
            { limit: 5 }
        );
        
        if (signatures.length > 0) {
            signatures.forEach((sig, index) => {
                console.log(`${index + 1}. ${sig.signature}`);
                console.log(`   –°–ª–æ—Ç: ${sig.slot}`);
                console.log(`   –°—Ç–∞—Ç—É—Å: ${sig.err ? '‚ùå –û—à–∏–±–∫–∞' : '‚úÖ –£—Å–ø–µ—à–Ω–æ'}`);
                console.log(`   –í—Ä–µ–º—è: ${new Date(sig.blockTime * 1000).toLocaleString()}`);
                console.log('');
            });
        } else {
            console.log('   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ü–æ–∏—Å–∫ PDA –¥–ª—è vault
        console.log('üîê –ü–æ–∏—Å–∫ Program Derived Address (PDA):');
        const [vaultPDA, bump] = PublicKey.findProgramAddressSync(
            [new PublicKey(WALLET_ADDRESS).toBuffer()],
            new PublicKey(PROGRAM_ID)
        );
        
        console.log(`‚úÖ Vault PDA: ${vaultPDA.toString()}`);
        console.log(`   Bump: ${bump}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è vault
        const vaultInfo = await connection.getAccountInfo(vaultPDA);
        if (vaultInfo) {
            console.log('‚úÖ Vault —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            console.log(`   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${vaultInfo.data.length} –±–∞–π—Ç`);
            console.log(`   –í–ª–∞–¥–µ–ª–µ—Ü: ${vaultInfo.owner.toString()}`);
            
            // –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ vault (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            if (vaultInfo.data.length >= 40) {
                const totalFractions = vaultInfo.data.readBigUInt64LE(8);
                console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∫—Ü–∏–π: ${totalFractions.toString()}`);
            }
        } else {
            console.log('‚ÑπÔ∏è  Vault –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞');
        }
        
        console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log('‚úÖ –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å');
        console.log('‚úÖ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ');
        console.log('‚úÖ PDA –∞–¥—Ä–µ—Å–∞ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testBackend();